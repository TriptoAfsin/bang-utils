{"version":3,"sources":["../src/index.ts","../src/utils/dateBang.ts","../src/utils/numBang.ts"],"sourcesContent":["import dateBang from \"./utils/dateBang\";\r\nimport numBang from \"./utils/numBang\";\r\n\r\nexport { dateBang, numBang };\r\n","import dayjs from \"dayjs\";\r\nimport timezone from \"dayjs/plugin/timezone\";\r\nimport utc from \"dayjs/plugin/utc\";\r\nimport numBang from \"./numBang\";\r\n\r\ndayjs.extend(utc);\r\ndayjs.extend(timezone);\r\n\r\nconst dateBang = (\r\n  engDate: string = \"2023-07-03\",\r\n  separator: string = \"/\"\r\n): string | void => {\r\n  try {\r\n    if (dayjs(engDate).isValid()) {\r\n      const engYear: any = dayjs(engDate).get(\"year\");\r\n      const engMonth: any = dayjs(engDate).get(\"month\");\r\n      const engDay: any = dayjs(engDate).tz(\"Asia/Dhaka\").get(\"date\");\r\n      // console.log('engDay', engDay)\r\n      const bdDate: string = `${numBang(\r\n        String(parseInt(engDay))\r\n      )}${separator}${numBang(\r\n        String(parseInt(engMonth) + 1)\r\n      )}${separator}${numBang(String(engYear))}`;\r\n\r\n      return bdDate;\r\n    } else {\r\n      console.error(\"Invalid date\");\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error converting date to Bangla:\", error);\r\n    return;\r\n  }\r\n};\r\n\r\nexport default dateBang;\r\n","const numMap: { [key: number]: string } = {\r\n  0: \"০\",\r\n  1: \"১\",\r\n  2: \"২\",\r\n  3: \"৩\",\r\n  4: \"৪\",\r\n  5: \"৫\",\r\n  6: \"৬\",\r\n  7: \"৭\",\r\n  8: \"৮\",\r\n  9: \"৯\",\r\n};\r\n\r\nconst numBang = (num: string = \"09\"): string => {\r\n  try {\r\n    const splitNums: string[] | undefined = num?.toString().split(\"\");\r\n    if (!splitNums) throw new Error(\"Invalid input\");\r\n\r\n    const splitBnNums: string[] = [];\r\n    for (let i = 0; i < splitNums.length; i++) {\r\n      const bnNum = numMap[parseInt(splitNums[i])];\r\n      if (bnNum) {\r\n        splitBnNums.push(bnNum);\r\n      } else {\r\n        throw new Error(\"Invalid number\");\r\n      }\r\n    }\r\n    return splitBnNums.join(\"\");\r\n  } catch (error) {\r\n    console.error(\"Error converting number to Bangla:\", error);\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport default numBang;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,mBAAkB;AAClB,sBAAqB;AACrB,iBAAgB;;;ACFhB,IAAM,SAAoC;AAAA,EACxC,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AACL;AAEA,IAAM,UAAU,CAAC,MAAc,SAAiB;AAC9C,MAAI;AACF,UAAM,YAAkC,2BAAK,WAAW,MAAM;AAC9D,QAAI,CAAC;AAAW,YAAM,IAAI,MAAM,eAAe;AAE/C,UAAM,cAAwB,CAAC;AAC/B,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,YAAM,QAAQ,OAAO,SAAS,UAAU,CAAC,CAAC,CAAC;AAC3C,UAAI,OAAO;AACT,oBAAY,KAAK,KAAK;AAAA,MACxB,OAAO;AACL,cAAM,IAAI,MAAM,gBAAgB;AAAA,MAClC;AAAA,IACF;AACA,WAAO,YAAY,KAAK,EAAE;AAAA,EAC5B,SAAS,OAAO;AACd,YAAQ,MAAM,sCAAsC,KAAK;AACzD,WAAO;AAAA,EACT;AACF;AAEA,IAAO,kBAAQ;;;AD7Bf,aAAAA,QAAM,OAAO,WAAAC,OAAG;AAChB,aAAAD,QAAM,OAAO,gBAAAE,OAAQ;AAErB,IAAM,WAAW,CACf,UAAkB,cAClB,YAAoB,QACF;AAClB,MAAI;AACF,YAAI,aAAAF,SAAM,OAAO,EAAE,QAAQ,GAAG;AAC5B,YAAM,cAAe,aAAAA,SAAM,OAAO,EAAE,IAAI,MAAM;AAC9C,YAAM,eAAgB,aAAAA,SAAM,OAAO,EAAE,IAAI,OAAO;AAChD,YAAM,aAAc,aAAAA,SAAM,OAAO,EAAE,GAAG,YAAY,EAAE,IAAI,MAAM;AAE9D,YAAM,SAAiB,GAAG;AAAA,QACxB,OAAO,SAAS,MAAM,CAAC;AAAA,MACzB,CAAC,GAAG,SAAS,GAAG;AAAA,QACd,OAAO,SAAS,QAAQ,IAAI,CAAC;AAAA,MAC/B,CAAC,GAAG,SAAS,GAAG,gBAAQ,OAAO,OAAO,CAAC,CAAC;AAExC,aAAO;AAAA,IACT,OAAO;AACL,cAAQ,MAAM,cAAc;AAC5B;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,oCAAoC,KAAK;AACvD;AAAA,EACF;AACF;AAEA,IAAO,mBAAQ;","names":["dayjs","utc","timezone"]}